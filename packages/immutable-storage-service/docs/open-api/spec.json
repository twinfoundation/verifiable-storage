{
	"openapi": "3.1.0",
	"info": {
		"title": "TWIN - Test Endpoints",
		"description": "REST API for TWIN - Test Endpoints.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost"
		}
	],
	"tags": [
		{
			"name": "ImmutableStorage",
			"description": "Endpoints which are modelled to access an Immutable Storage."
		}
	],
	"paths": {
		"/immutable": {
			"post": {
				"operationId": "immutableStorageStore",
				"summary": "Store an item in immutable storage",
				"tags": [
					"ImmutableStorage"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Store the data and return the Immutable Storage id.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImmutableStorageStoreRequest"
							},
							"examples": {
								"immutableStorageStoreExample": {
									"value": {
										"data": "SGVsbG8gd29ybGQ="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to storing the Immutable Storage.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImmutableStorageStoreResponse"
								},
								"examples": {
									"immutableStorageStoreResponseExample": {
										"value": {
											"receipt": {
												"@context": "https://schema.twindev.org/immutable-storage/",
												"type": "ImmutableStorageIotaReceipt"
											},
											"id": "immutable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
										}
									}
								}
							}
						},
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. immutable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable/{id}": {
			"get": {
				"operationId": "immutableStorageGet",
				"summary": "Get an immutable storage item",
				"tags": [
					"ImmutableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the Immutable Storage to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "immutable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Get the Immutable Storage.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImmutableStorageGetRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to getting the Immutable Storage.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImmutableStorageGetResponse"
								},
								"examples": {
									"immutableStorageGetResponseExample": {
										"value": {
											"data": "SGVsbG8gd29ybGQ=",
											"receipt": {
												"@context": "https://www.w3.org/ns/activitystreams",
												"type": "Create",
												"actor": "https://example.org/actor",
												"object": "https://example.org/object"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "immutableStorageRemove",
				"summary": "Remove an item from immutable storage",
				"tags": [
					"ImmutableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the Immutable Storage to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "immutable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"ImmutableStorageGetRequest": {
				"type": "object",
				"properties": {
					"includeData": {
						"type": "boolean",
						"description": "The flag to include the data."
					}
				},
				"required": [
					"includeData"
				],
				"additionalProperties": false,
				"description": "The body optional param."
			},
			"ImmutableStorageGetResponse": {
				"type": "object",
				"properties": {
					"receipt": {
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					"data": {
						"type": "string",
						"description": "The data of the Immutable Storage, this is a string serialized as base64."
					}
				},
				"required": [
					"receipt"
				],
				"additionalProperties": false,
				"description": "The data that was obtained."
			},
			"ImmutableStorageStoreRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data for the Immutable Storage, this is a string serialized as base64."
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the Immutable Storage, defaults to component configured namespace."
					}
				},
				"required": [
					"data"
				],
				"additionalProperties": false,
				"description": "The data to be stored."
			},
			"ImmutableStorageStoreResponse": {
				"type": "object",
				"properties": {
					"receipt": {
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					"id": {
						"type": "string",
						"description": "The id of the Immutable Storage."
					}
				},
				"required": [
					"receipt",
					"id"
				],
				"additionalProperties": false,
				"description": "The data that was stored."
			},
			"JsonLdContainerType": {
				"type": "string",
				"enum": [
					"@language",
					"@index",
					"@id",
					"@graph",
					"@type"
				],
				"description": "Helper Types"
			},
			"JsonLdContainerTypeArray": {
				"anyOf": [
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@id"
							}
						],
						"maxItems": 2
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@graph"
							}
						],
						"maxItems": 2
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@id"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@graph"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@id"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@graph"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@set"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@set"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "@set"
							},
							{
								"$ref": "#/components/schemas/JsonLdContainerType"
							}
						],
						"maxItems": 2
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"$ref": "#/components/schemas/JsonLdContainerType"
							},
							{
								"type": "string",
								"const": "@set"
							}
						],
						"maxItems": 2
					}
				],
				"description": "Helper Types."
			},
			"JsonLdContextDefinition": {
				"type": "object",
				"properties": {
					"@base": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@direction": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@import": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@language": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@propagate": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@protected": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@type": {
						"type": "object",
						"properties": {
							"@container": {
								"type": "string",
								"const": "@set"
							},
							"@protected": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@container"
						],
						"additionalProperties": false
					},
					"@version": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@vocab": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "string"
						},
						{
							"$ref": "#/components/schemas/JsonLdExpandedTermDefinition"
						}
					]
				},
				"description": "A context definition defines a local context in a node object."
			},
			"JsonLdContextDefinitionElement": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdContextDefinition"
					}
				],
				"description": "A context definition element is used to define the types of a context definition."
			},
			"JsonLdContextDefinitionRoot": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
					},
					{
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
						}
					}
				],
				"description": "A context definition root is used to define the root of a context definition."
			},
			"JsonLdExpandedTermDefinition": {
				"anyOf": [
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@id": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/JsonLdKeyword"
									},
									{
										"type": "null"
									}
								]
							},
							"@nest": {
								"type": "string"
							},
							"@container": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@type": {
								"type": "string"
							},
							"@language": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdContextDefinition"
							},
							"@prefix": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@propagate": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@protected": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						}
					},
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@reverse": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@container": {
								"type": [
									"string",
									"null"
								],
								"enum": [
									"@set",
									"@index",
									null
								]
							},
							"@type": {
								"type": "string"
							},
							"@language": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdContextDefinition"
							},
							"@prefix": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@propagate": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@protected": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@reverse"
						]
					}
				],
				"description": "An expanded term definition is used to describe the mapping between a term and its expanded identifier, as well as other properties of the value associated with the term when it is used as key in a node object."
			},
			"JsonLdGraphObject": {
				"type": "object",
				"properties": {
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@index": {
						"type": "string"
					},
					"@id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"@context": {
						"$ref": "#/components/schemas/JsonLdContextDefinitionRoot"
					}
				},
				"required": [
					"@graph"
				],
				"additionalProperties": false,
				"description": "A graph object represents a named graph, which MAY include an explicit graph name."
			},
			"JsonLdIdMap": {
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/JsonLdNodeObject"
				},
				"description": "An id map is used to associate an IRI with a value that allows easy programmatic access."
			},
			"JsonLdIncludedBlock": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/JsonLdNodeObject"
						}
					}
				],
				"description": "An included block is used to provide a set of node objects."
			},
			"JsonLdIndexMap": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdIndexMapItem"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/JsonLdIndexMapItem"
							}
						}
					]
				},
				"description": "An index map allows keys that have no semantic meaning, but should be preserved regardless, to be used in JSON-LD documents."
			},
			"JsonLdIndexMapItem": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "boolean"
					},
					{
						"type": "number"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdValueObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdListObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdSetObject"
					}
				],
				"description": "The items that can be stored in an index map."
			},
			"JsonLdJsonArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/JsonLdJsonValue"
				},
				"description": "JSON Type for array."
			},
			"JsonLdJsonObject": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdJsonValue"
						},
						{
							"not": {}
						}
					]
				},
				"description": "JSON Type for object."
			},
			"JsonLdJsonPrimitive": {
				"type": [
					"string",
					"number",
					"boolean",
					"null"
				],
				"description": "JSON Primitive."
			},
			"JsonLdJsonValue": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonLdJsonPrimitive"
					},
					{
						"$ref": "#/components/schemas/JsonLdJsonArray"
					},
					{
						"$ref": "#/components/schemas/JsonLdJsonObject"
					}
				],
				"description": "JSON Value."
			},
			"JsonLdKeyword": {
				"type": "object",
				"properties": {
					"@base": {
						"type": [
							"string",
							"null"
						]
					},
					"@container": {
						"anyOf": [
							{
								"type": "string",
								"const": "@list"
							},
							{
								"type": "string",
								"const": "@set"
							},
							{
								"$ref": "#/components/schemas/JsonLdContainerType"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "string",
											"const": "@list"
										},
										{
											"type": "string",
											"const": "@set"
										},
										{
											"$ref": "#/components/schemas/JsonLdContainerType"
										}
									]
								}
							},
							{
								"$ref": "#/components/schemas/JsonLdContainerTypeArray"
							},
							{
								"type": "null"
							}
						]
					},
					"@context": {
						"$ref": "#/components/schemas/JsonLdContextDefinitionRoot"
					},
					"@direction": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"ltr",
							"rtl",
							null
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdValueObject"
							},
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/JsonLdValueObject"
										},
										{
											"$ref": "#/components/schemas/JsonLdNodeObject"
										}
									]
								}
							}
						]
					},
					"@id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"@import": {
						"type": "string"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdIncludedBlock"
					},
					"@index": {
						"type": "string"
					},
					"@json": {
						"type": "string",
						"const": "@json"
					},
					"@language": {
						"type": "string"
					},
					"@list": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdListOrSetItem"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdListOrSetItem"
								}
							}
						]
					},
					"@nest": {
						"type": "object"
					},
					"@none": {
						"type": "string",
						"const": "@none"
					},
					"@prefix": {
						"type": "boolean"
					},
					"@propagate": {
						"type": "boolean"
					},
					"@protected": {
						"type": "boolean"
					},
					"@reverse": {
						"type": "string"
					},
					"@set": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdListOrSetItem"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdListOrSetItem"
								}
							}
						]
					},
					"@type": {
						"type": "string"
					},
					"@value": {
						"type": [
							"null",
							"boolean",
							"number",
							"string"
						]
					},
					"@version": {
						"type": "string",
						"const": "1.1"
					},
					"@vocab": {
						"type": [
							"string",
							"null"
						]
					}
				},
				"required": [
					"@base",
					"@container",
					"@context",
					"@direction",
					"@graph",
					"@id",
					"@import",
					"@included",
					"@index",
					"@json",
					"@language",
					"@list",
					"@nest",
					"@none",
					"@prefix",
					"@propagate",
					"@protected",
					"@reverse",
					"@set",
					"@type",
					"@value",
					"@version",
					"@vocab"
				],
				"additionalProperties": false,
				"description": "A list of keywords and their types. Only used for internal reference; not an actual interface. Not for export."
			},
			"JsonLdLanguageMap": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				},
				"description": "A language map is used to associate a language with a value in a way that allows easy programmatic access."
			},
			"JsonLdListObject": {
				"type": "object",
				"properties": {
					"@list": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdListOrSetItem"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdListOrSetItem"
								}
							}
						]
					},
					"@index": {
						"type": "string"
					}
				},
				"required": [
					"@list"
				],
				"additionalProperties": false,
				"description": "A list represents an ordered set of values."
			},
			"JsonLdListOrSetItem": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "boolean"
					},
					{
						"type": "number"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdValueObject"
					}
				],
				"description": "A list or set item can be a null, boolean, number, string, node object, or value object."
			},
			"JsonLdNodeObject": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdContextDefinitionRoot"
					},
					"@id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdIncludedBlock"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"type": "string"
						}
					},
					"@index": {
						"type": "string"
					}
				},
				"description": "A node object represents zero or more properties of a node in the graph serialized by the JSON-LD document."
			},
			"JsonLdNodePrimitive": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "boolean"
					},
					{
						"type": "number"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdGraphObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdValueObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdListObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdSetObject"
					}
				],
				"description": "A node primitive is a JSON-LD value which is not one of the defined NodeObject properties."
			},
			"JsonLdSetObject": {
				"type": "object",
				"properties": {
					"@set": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdListOrSetItem"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdListOrSetItem"
								}
							}
						]
					},
					"@index": {
						"type": "string"
					}
				},
				"required": [
					"@set"
				],
				"additionalProperties": false,
				"description": "A set represents an unordered set of values."
			},
			"JsonLdTypeMap": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"$ref": "#/components/schemas/JsonLdNodeObject"
						}
					]
				},
				"description": "A type map is used to associate an IRI with a value that allows easy programmatic access."
			},
			"JsonLdValueObject": {
				"anyOf": [
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@value": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@language": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@direction": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@value"
						]
					},
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@value": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@type": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@type",
							"@value"
						]
					},
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@value": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/JsonLdKeyword"
									},
									{
										"$ref": "#/components/schemas/JsonLdJsonObject"
									},
									{
										"$ref": "#/components/schemas/JsonLdJsonArray"
									}
								]
							},
							"@type": {
								"type": "string",
								"const": "@json"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@type",
							"@value"
						]
					}
				],
				"description": "A value object is used to explicitly associate a type or a language with a value to create a typed value or a language-tagged string and possibly associate a base direction."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
